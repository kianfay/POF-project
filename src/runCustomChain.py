from src.bitcoinCliUtil import instruct_wallet
from src.bitcoinCliUtil import addCustomTxsAndReadIt
import hashlib
import functools
import json

""""""""""""
"""
Makes a Proof of Flow chain given a recipe (the punchcard)

Parameters:
    - punchcard     - an array specifying the number of txs in each block,
                      where the index in the array is the relative height 
                      of the block in the blockchain from the first block
                      generated by this function
"""
""""""""""""
def runCustomChain(punchcard):
    """"""
    """
    Putting a hash of 2 txs in block X, into the new tx in block X+1.

    First we crete and load a wallet.
    """
    """"""
    methodAndParams = [
        ['createwallet', 
            ['regtest']
        ],
        ['loadwallet', 
            ['regtest']
        ],
        ['getblockhash', 
            [0]
        ],
        ['getnewaddress', 
            []
        ]
    ]

    address = None;
    for i in range(0,4):
        ret = instruct_wallet(methodAndParams[i][0], methodAndParams[i][1])
        print(ret,'\n')
        if(i == 3):
            address = ret['result']


    """"""
    """ 
    Generate enough blocks for Y coinbase txs to make raw txs from.
    Y=3
    """
    """"""
    method = 'generatetoaddress'
    numberOfCoinbasesNeeded = 100 + functools.reduce(lambda x,y: x+y, punchcard)
    ret = instruct_wallet(method, [numberOfCoinbasesNeeded, address])
    blockHashes = ret['result']
    print(str(method),':\n', ret,'\n')

    """ "gen".toAscii() = 67656e """
    listOfBlocks = blockHashes[0 : punchcard[0]]
    signedTxs = addCustomTxsAndReadIt(listOfBlocks, address, "67656e")


    """"""
    """ 
    Adding the hash from the genesis tx to the next tx.
    Using secondBlockHash now  to get a new coinbase tx.
    """
    """"""
    currentTx = punchcard[0]

    numberOfBlocks = len(punchcard)
    for numberOfTxs in punchcard[1:numberOfBlocks]:
        print('\n\n', 'Plain txs: ', str(signedTxs), '\n')
        hashedTxs = hashlib.sha256(bytes(str(signedTxs), 'utf-8')).hexdigest()

        print('\n\n', 'Hashed txs: ', hashedTxs, '\n')

        listOfBlocks = blockHashes[currentTx : currentTx + numberOfTxs]
        currentTx = currentTx + numberOfTxs

        signedTxs = addCustomTxsAndReadIt(listOfBlocks, address, hashedTxs)
